"""Corrections for typos/misprints in data"""

import sys
import os
import json
from pathlib import Path

cwd = os.getcwd()

def getBrands():
    os.chdir(Path(__file__).parent / '..' / '..' / 'Data' / 'YAML')
    brands = list(map(lambda x: x.replace('-', ''), os.listdir(os.getcwd())))
    os.chdir(cwd)
    return brands

def getAttributes():
    with open(Path(__file__).parent / '..' / '..' / 'Docs' / 'KeyGroups.json', 'r') as f:
        data = json.load(f)

    attrs = list()
    for k in data.keys():
        attrs += list(data[k].keys())

    return attrs

BRANDS = getBrands()
ATTRIBUTES = getAttributes()


def makeCorrectionFiles():
    makeMain()

    if not os.path.exists(Path(__file__).parent / 'Corrections'):
        os.mkdir(Path(__file__).parent / 'Corrections')

    makeHelpers()


def makeMain():
    def makeCorrection():
        if not os.path.isfile(Path(__file__).parent / 'Correction.py'):
            data = [
                '# Automatically generated file - DO NOT EDIT\n',
                '\n',
                '\n'
                '#from Corrections import *\n',
            ]


            for b in BRANDS:
                data.append('from Corrections.' + b + ' import ' + b + '_Corrections\n')

            data += [
                '\n',
                '\n',
                'class Correction():\n'
                '\t"""\n',
                '\tCorrection object containing helper objects and functions to correct data\n',
                '\tduring the conversion from JSON to CSV format\n',
                '\t"""\n',
                '\n',
                '\tdef __init__(self):\n',
                '\t\t"""\n',
                '\t\tInitialize the Correction object and its helpers\n',
                '\t\t"""\n',
                '\n'
            ]

            for b in BRANDS:
                data.append("\t\tself._" + b + " = " + b + "_Corrections()\n")

            data += [
                '\n',
                '\n',
                '\tdef fix(self, data: dict, brand: str) -> dict:\n',
                '\t\t"""\n',
                '\t\tCalls helper class fix functions to correct dictionoary of data passed in. Returns corrected data dictionary\n'
                '\t\t"""\n',
                '\n',
                '\t\tmatch brand:\n'
            ]

            for b in BRANDS:
                data.append('\t\t\tcase "' + b + '":\n')
                data.append('\t\t\t\treturn self._' + b + '.fix(data)\n')
            
            data += [
                '\t\t\tcase _:\n',
                '\t\t\t\t# default case\n',
                '\t\t\t\traise ValueError("Invalid brand " + brand)\n'
            ]

            print("Making Correction.py")
            with open(Path(__file__).parent / 'Correction.py', 'w') as f:
                f.writelines(data)
    
    def makeTemplate():
        """ todo: use abstract base class on this? """
        if not os.path.isfile('Correction_Template.py'):
            data = [
                '# Automatically generated file - DO NOT EDIT\n',
                '\n',
                'class Correction_Template():\n',
                '\t"""\n',
                '\tThis class is a template for all correction helper classes\n',
                '\t"""\n',
                '\n',
                '\tdef fix(self, data: dict[str, str]) -> dict:\n',
                '\t\t# This will be implemented (default template) automatically in each autogenerated subclass\n',
                '\t\tpass\n'
            ]

            print("Making Correction_Template.py")
            with open(Path(__file__).parent / 'Correction_Template.py', 'w') as f:
                f.writelines(data)

    makeCorrection()
    makeTemplate()

def makeHelpers():
    def makeInit():
        data = [
            '# Automatically generated file - DO NOT EDIT\n',
            '\n',
            'from os.path import dirname, basename, isfile, join\n',
            'import glob\n',
            'modules = glob.glob(join(dirname(__file__), "*.py"))\n',
            '__all__ = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith("__init__.py")]\n',
            '\n',
            '# to import use:\n',
            '# from Corrections import *\n'
        ]
        print("Making Corrections/__init__.py")
        with open(Path(__file__).parent / 'Corrections' / '__init__.py', 'w') as f:
            f.writelines(data)
    
    def makeCorrectionHelperFiles():
        for b in BRANDS:
            data = [
                '# Automatically generated file template\n',
                '\n',
                'import re\n',
                '\n',
                'from Correction_Template import Correction_Template\n'
                '\n',
                'class ' + b + '_Corrections(Correction_Template):\n',
                '\t"""\n',
                '\tHelper class for ' + b + ' corrections\n',
                '\t"""\n',
                '\n',
                '\tdef fix(self, data: dict) -> dict:\n',
                '\t\t"""\n',
                '\t\tMakes corrections to the data entry dict\n',
                '\n',
                '\t\tTo make corrections implement the case setting `result[k]` to the corrected value\n',
                '\t\t"""\n',
                '\t\tresult = data.copy()\n',
                '\n',
                '\t\tfor k in data.keys():\n',
                '\t\t\tmatch k:\n'   
            ]
    
            for a in ATTRIBUTES:
                data.append("\t\t\t\tcase \"" + str(a.encode('utf-8'), encoding='utf-8') + "\":\n")
                data.append("\t\t\t\t\tpass #Implement this if necessary\n")

            data += [
                '\t\t\t\tcase _:\n',
                '\t\t\t\t\tpass # default case\n',
                '\n',
                '\t\treturn result\n'
            ]

            print("Making Corrections/" + b + ".py")
            with open(Path(__file__).parent / "Corrections" / (b + ".py"), 'w') as f:
                f.writelines(data)

    makeInit()
    makeCorrectionHelperFiles()




if __name__ == '__main__':
    # print(BRANDS)
    # print(ATTRIBUTES)
    if len(sys.argv) > 1 and sys.argv[1].lower() == 'clean':
        if os.path.exists('Correction.py'):
            os.remove('Correction.py')
        if os.path.exists('Corrections'):
            os.chdir('Corrections')
            for f in os.listdir():
                os.remove(f)
            os.chdir('..')
            # os.rmdir('Corrections')
    else:
        # makeMain()
        # makeHelpers()
        makeCorrectionFiles()
